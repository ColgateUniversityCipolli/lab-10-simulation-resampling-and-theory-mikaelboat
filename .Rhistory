rbinom(n = samp.size, size = 1, prob = 0.39)
rbinom(n = samp.size, size = 1, prob = 0.39)
rbinom(n = samp.size, size = 1, prob = 0.39)
rbinom(n = samp.size, size = 1, prob = 0.39)
rbinom(n = samp.size, size = 1, prob = 0.39)
rbinom(n = samp.size, size = 1, prob = 0.39)
rbinom(n = samp.size, size = 1, prob = 0.39)
rbinom(n = samp.size, size = 1, prob = 0.39)
rbinom(n = samp.size, size = 1, prob = 0.39)
rbinom(n = samp.size, size = 1, prob = 0.39)
rbinom(n = samp.size, size = 1, prob = 0.39)
rbinom(n = 10000, size = 1004, prob = 0.39)
?rbinom
?quantile
?geom_raster
for (n in N){
for (p in P){
curr.sim <- rbinom(n = 10000, size = n, prob = p)
percentile_2.5 <- quantile(curr.sim, 0.025)
percentile_97.5 <- quantile(curr.sim, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
}
}
N <- seq(from = 100, to = 300, by = 10)
P <- seq(from = 0.01, to = 0.99, by = 0.01)
simulations <- tibble(half.of.range = numeric(length(N)))
for (n in N){
for (p in P){
curr.sim <- rbinom(n = 10000, size = n, prob = p)
percentile_2.5 <- quantile(curr.sim, 0.025)
percentile_97.5 <- quantile(curr.sim, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
simulations[i] = num
}
}
i = 1
i += 1
simulations <- tibble(half.of.range = numeric(length(N)))
i = 1
for (n in N){
for (p in P){
curr.sim <- rbinom(n = 10000, size = n, prob = p)
percentile_2.5 <- quantile(curr.sim, 0.025)
percentile_97.5 <- quantile(curr.sim, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
simulations[i] = num
i = i + 1
}
}
simulations <- tibble(half.of.range = numeric(length(N)))
i = 1
for (n in N){
for (p in P){
curr.sim <- rbinom(n = 10000, size = n, prob = p)
percentile_2.5 <- quantile(curr.sim, 0.025)
percentile_97.5 <- quantile(curr.sim, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
simulations$half.of.range[i] = num
i = i + 1
}
}
View(simulations)
View(simulations)
simulations <- tibble(half.of.range = numeric(length(N) * length(P)))
i = 1
for (n in N){
for (p in P){
curr.sim <- rbinom(n = 10000, size = n, prob = p)
percentile_2.5 <- quantile(curr.sim, 0.025)
percentile_97.5 <- quantile(curr.sim, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
simulations$half.of.range[i] = num
i = i + 1
}
}
View(simulations)
View(simulations)
geom_raster(half.of.range)
result.p <- ggplot(data = simulations){
result.p <- ggplot(data = simulations) +
geom_raster(half.of.range)
View(simulations)
View(simulations)
result.p <- ggplot(data = simulations) +
geom_raster(aes(x = half.of.range))
result.p <- ggplot(data = simulations) +
geom_raster(aes(x = half.of.range, y = after_stat(density)))
result.p
source("~/GitHub/lab-10-simulation-resampling-and-theory-mikaelboat/lab10.R", echo=TRUE)
result.p
View(simulations)
View(simulations)
result.p <- ggplot(data = simulations) +
geom_raster(aes(x = half.of.range))
result.p
result.p <- ggplot(data = simulations) +
geom_raster(aes(x = half.of.range, y = after_stat(density)))
result.p
?rbinom
sample <- rbinom(n = 10,000, size = samp.size, prob = 0.39)
sample <- rbinom(n = 10000, size = samp.size, prob = 0.39)
sample
sample
sims <- tibble(poll = sample)
sims
View(sims)
View(sims)
sample.plot <- ggplot(data = sims) +
geom_histogram(aes(x = poll, y = after_stat(density))) +
geom_density(aes(x = poll))
sample.plot
#####################
# testing 20000
sample_2 <- rbinom(n = 20000, size = 1004, prob = 0.39)
sims_20k <- tibble(poll = sample_2)
sample.plot2 <- ggplot(data = sims_20k) +
geom_histogram(aes(x = poll, y = after_stat(density))) +
geom_density(aes(x = poll))
sample.plot2
#############################
# TASK 2
#############################
gallup.data <- tibble(poll = c(rep(1,(round(0.39*1004))),
rep(0,(round(0.59*1004))),
rep(NA,(round(0.02*1004)))))
View(gallup.data)
View(gallup.data)
which(gallup.data == Na)
which(gallup.data == NA)
?which
which(gallup.data)
which(is.na(gallup.data))
source("~/GitHub/lab-10-simulation-resampling-and-theory-mikaelboat/lab10.R", echo=TRUE)
resample <- sample(x = gallup.data$poll,
size = 1004,
replace = T)
resample <- sample(x = gallup.data$poll,
size = 1004,
replace = T)
resamnole
resample
#####################
# testing twice the sample size
sample_2 <- rbinom(n = 10000, size = samp.size * 2, prob = 0.39)
#####################
# testing twice the sample size
sample_2 <- rbinom(n = 10000, size = samp.size * 2, prob = 0.39)
sims_2 <- tibble(poll = sample_2)
sample.plot2 <- ggplot(data = sims_2) +
geom_histogram(aes(x = poll, y = after_stat(density))) +
geom_density(aes(x = poll))
sample.plot2
sample.plot
sample.plot
sample.plot
sample.plot
sample.plot2
resample.plot <- ggplot(data = data.frame(resample)) +
geom_histogram(aes(x = data, y = after_stat(density)))
resample.plot
?sample
resample <- sample(x = gallup.data$poll,
size = 1004,
replace = T)
resample <- tibble(poll = resample)
resample.plot <- ggplot(data = resample) +
geom_histogram(aes(x = data, y = after_stat(density)))
resample.plot
?data.frame
?na.rm
??na.rm
resample.plot <- ggplot(data = data.frame(resample, na.rm = T)) +
geom_histogram(aes(x = data, y = after_stat(density)))
resample
resample.plot
resample.plot <- ggplot(data = data.frame(resample)) +
resample.plot <- ggplot(data = data.frame(resample)) +
geom_histogram(aes(x = data, y = after_stat(density)))
resample <- sample(x = gallup.data$poll,
size = 1004,
replace = T)
resample.plot <- ggplot(data = data.frame(resample)) +
geom_histogram(aes(x = data, y = after_stat(density)))
resample.plot
?sample
resample <- sample(x = gallup.data$poll,
size = 1004,
replace = T)
resample
dim(resample)
length(resample)
na.omit(resample)
resample
length(resample)
test <- na.omit(resample)
test
length(test)
resample.plot <- ggplot(data = data.frame(resample)) +
geom_histogram(aes(x = x, y = after_stat(density)))
resample.plot
rlang::last_trace()
data.frame(resample)
test <- data.frame(resample)
View(test)
View(test)
resample.plot <- ggplot(data = data.frame(resample)) +
geom_histogram(aes(x = resample, y = after_stat(density)))
resample.plot
?geom_histogram
resample.plot <- ggplot(data = data.frame(resample)) +
geom_histogram(aes(x = resample,
y = after_stat(density)),
binwidth = 10)
resample.plot
(resample.plot <- ggplot(data = data.frame(resample)) +
geom_histogram(aes(x = resample,
y = after_stat(density)),
binwidth = 30))
(resample.plot <- ggplot(data = data.frame(resample)) +
geom_histogram(aes(x = resample,
y = after_stat(density)),
binwidth = 1))
(resample.plot <- ggplot(data = data.frame(resample)) +
geom_histogram(aes(x = resample,
y = after_stat(density)),
binwidth = 0.1))
(resample.plot <- ggplot(data = data.frame(resample)) +
geom_histogram(aes(x = resample,
y = after_stat(density))))
R <- 1000
gallup.resamples <- tibble(proportion = numeric(R))
for (i in R){
resample <- sample(x = gallup.data$poll,
size = 1004,
replace = T)
gallup.resamples$proportions[i] = mean(resample == 1)
}
for (i in R){
resample <- sample(x = gallup.data$poll,
size = 1004,
replace = T)
gallup.resamples$proportion[i] = mean(resample == 1)
}
gallup.resamples
View(gallup.resamples)
View(gallup.resamples)
R <- 1000
gallup.resamples <- tibble(proportion = numeric(R))
for (i in R){
resample <- sample(x = gallup.data$poll,
size = 1004,
replace = T)
gallup.resamples$proportion[i] = mean(resample)
}
View(gallup.resamples)
View(gallup.resamples)
?mean
gallup.resamples$proportion[i] = mean(resample, na.rm = T)
gallup.resamples
#############################
# TASK 2
#############################                               # creating the Gallup data
gallup.data <- tibble(poll = c(rep(1,(round(0.39*1004))),   # where 1 = 'satisfied'
rep(0,(round(0.59*1004))),   # 0 = 'dissatisfied'
rep(NA,(round(0.02*1004))))) # NA = 'no opinion'
R <- 1000
gallup.resamples <- tibble(proportion = numeric(R))
for (i in R){
resample <- sample(x = gallup.data$poll,
size = 1004,
replace = T)
gallup.resamples$proportion[i] = mean(resample, na.rm = T)
}
gallup.resamples
resample
mean(resample)
mean(resample, na.rm = T)
typeof(mean(resample, na.rm = T))
gallup.resamples <- tibble(proportion = double(R))
for (i in R){
resample <- sample(x = gallup.data$poll,
size = 1004,
replace = T)
gallup.resamples$proportion[i] = mean(resample, na.rm = T)
}
(resample.plot <- ggplot(data = data.frame(resample)) +
geom_histogram(aes(x = resample,
y = after_stat(density))))
gallup.data
gallup.resamples
View(gallup.resamples)
View(gallup.resamples)
R <- 1000
gallup.resamples <- tibble(proportion = double(R))
for (i in 1:R){
resample <- sample(x = gallup.data$poll,
size = 1004,
replace = T)
gallup.resamples$proportion[i] = mean(resample, na.rm = T)
}
gallup.resamples
R <- 1000
gallup.resamples <- tibble(proportion = numeric(R))
for (i in 1:R){
resample <- sample(x = gallup.data$poll,
size = 1004,
replace = T)
gallup.resamples$proportion[i] = mean(resample, na.rm = T)
}
gallup.resamples.
gallup.resamples
R <- 1000
gallup.resamples <- tibble(p.hat = numeric(R))
for (i in 1:R){
resample <- sample(x = gallup.data$poll,
size = 1004,
replace = T)
gallup.resamples$p.hat[i] = mean(resample, na.rm = T)
}
(resample.plot <- ggplot(data = gallup.resamples) +
geom_histogram(aes(x = p.hat,
y = after_stat(density))))
(resample.plot <- ggplot(data = gallup.resamples) +
geom_histogram(aes(x = p.hat,
y = after_stat(density))) +
geom_density(aes(x = p.hat))
)
########################################
# TASK 3
########################################
N <- seq(from = 100, to = 300, by = 10)
P <- seq(from = 0.01, to = 0.99, by = 0.01)
simulations <- tibble(half.of.range = numeric(length(N) * length(P)))
i = 1
for (n in N){
for (p in P){
curr.sim <- rbinom(n = 10000, size = n, prob = p)
percentile_2.5 <- quantile(curr.sim, 0.025)
percentile_97.5 <- quantile(curr.sim, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
simulations$half.of.range[i] = num
i = i + 1
}
}
simulations
dim(simulations)
simulations <- tibble(
n = numeric(length(N) * length(P)),
p = numeric(length(N) * length(P)),
half.of.range = numeric(length(N) * length(P)))
for (n in N){
for (p in P){
curr.sim <- rbinom(n = 10000, size = n, prob = p)
percentile_2.5 <- quantile(curr.sim, 0.025)
percentile_97.5 <- quantile(curr.sim, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
simulations <- bind_rows(simulations,
c(n, p, num))
}
}
?bind_rows
########################################
# TASK 3
########################################
N <- seq(from = 100, to = 300, by = 10)
P <- seq(from = 0.01, to = 0.99, by = 0.01)
simulations <- tibble(
n = numeric(length(N) * length(P)),
p = numeric(length(N) * length(P)),
margin.of.error = numeric(length(N) * length(P)))
for (n in N){
for (p in P){
curr.sim <- rbinom(n = 10000, size = n, prob = p)
percentile_2.5 <- quantile(curr.sim, 0.025)
percentile_97.5 <- quantile(curr.sim, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
simulations <- bind_rows(simulations,
tibble(n = n, p = p, margin.of.error = num))
}
}
View(simulations)
View(simulations)
dim(simulations)
simulations <- tibble(
n = numeric(length(N) * length(P)),
p = numeric(length(N) * length(P)),
margin.of.error = numeric(length(N) * length(P)))
for (i in N){
for (j in P){
curr.sim <- rbinom(n = 10000, size = n, prob = p)
percentile_2.5 <- quantile(curr.sim, 0.025)
percentile_97.5 <- quantile(curr.sim, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
simulations <- bind_rows(simulations,
tibble(n = i, p = j, margin.of.error = num))
}
}
View(simulations)
View(simulations)
simulations <- tibble(
n = numeric(length(N) * length(P)),
p = numeric(length(N) * length(P)),
margin.of.error = numeric(length(N) * length(P)))
for (i in N){
for (j in P){
curr.sim <- rbinom(n = 10000, size = i, prob = j)
percentile_2.5 <- quantile(curr.sim, 0.025)
percentile_97.5 <- quantile(curr.sim, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
simulations <- bind_rows(simulations,
tibble(n = i, p = j, margin.of.error = num))
}
}
View(simulations)
View(simulations)
View(simulations)
simulations <- tibble(
n = numeric(),
p = numeric(),
margin.of.error = numeric())
for (i in N){
for (j in P){
curr.sim <- rbinom(n = 10000, size = i, prob = j)
percentile_2.5 <- quantile(curr.sim, 0.025)
percentile_97.5 <- quantile(curr.sim, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
simulations <- bind_rows(simulations,
tibble(n = i, p = j, margin.of.error = num))
}
}
dim(simulations)
?geom_raster
result.p <- ggplot(data = simulations) +
geom_raster(aes(x = half.of.range, y = after_stat(density), fill = margin.of.error))
result.p
result.p <- ggplot(data = simulations) +
geom_raster(aes(x = n, y = p, fill = margin.of.error))
result.p
?qnorm
###########################################
# TASK 4
###########################################
N <- seq(100, 2000, by = 10)
P <- seq(0.01, 0.99, by=0.01)
z <- qnorm(0.975)  # 95% confidence interval
wilson.results <- tibble(n = numeric(),
p = numeric(),
margin.of.error = numeric())
for (n in N) {
for (p in P) {
numerator <- sqrt((n * p * (1-p)) + (z^2 / 4))
denominator <- n + z^2
error <- z * (sqrt((n * p * (1-p)) + (z^2 / 4))) / (n + z^2)
wilson.results <- bind_rows(wilson_margin_error_results,
tibble(n = n, p = p, margin.of.error = error))
}
}
for (n in N) {
for (p in P) {
numerator <- sqrt((n * p * (1-p)) + (z^2 / 4))
denominator <- n + z^2
error <- z * (sqrt((n * p * (1-p)) + (z^2 / 4))) / (n + z^2)
wilson.results <- bind_rows(wilson.results,
tibble(n = n, p = p, margin.of.error = error))
}
}
wilson.plot <- ggplot(data = wilson.results) +
geom_raster(aes(x = n, y = p, fill = margin.of.error))
wilson.plot
source("~/GitHub/lab-10-simulation-resampling-and-theory-mikaelboat/lab10.R", echo=TRUE)
percentile_2.5 <- quantile(sims, 0.025)
percentile_2.5 <- quantile(sims$poll, 0.025)
percentile_97.5 <- quantile(sims$poll, 0.975)
(num <- (percentile_97.5 - percentile_2.5) / 2)
num
num <- (percentile_97.5 - percentile_2.5) / 2
num
percentile_2.5 <- quantile(sims_2$poll, 0.025)
percentile_97.5 <- quantile(sims_2$poll, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
num
sims_2$poll
View(simulations)
View(simulations)
sample <- rbinom(n = 10000, size = samp.size, prob = 0.39)
sims <- tibble(poll = sample)
percentile_2.5 <- quantile(sims$poll, 0.025)
percentile_97.5 <- quantile(sims$poll, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
num
#########################################
# TASK 1
#########################################
samp.size <- 1004
sample <- rbinom(n = 10000, size = samp.size, prob = 0.39)
sims <- tibble(poll = sample)
percentile_2.5 <- quantile(sims$poll, 0.025)
percentile_97.5 <- quantile(sims$poll, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
num
sample <- rbinom(n = 10000, size = samp.size, prob = 0.39)
sims <- tibble(poll = sample/1004)
percentile_2.5 <- quantile(sims$poll, 0.025)
percentile_97.5 <- quantile(sims$poll, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
num
sims_2 <- tibble(poll = sample_2/2008)
percentile_2.5 <- quantile(sims_2$poll, 0.025)
percentile_97.5 <- quantile(sims_2$poll, 0.975)
num <- (percentile_97.5 - percentile_2.5) / 2
num
source("~/GitHub/lab-10-simulation-resampling-and-theory-mikaelboat/lab10.R", echo=TRUE)
